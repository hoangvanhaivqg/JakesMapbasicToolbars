'****************************************************************
'* Jake's Amazing Toolbar - Helper Functions                    *
'* 2009-2011 All Rights Reserved                                *
'* Source available at github.com/mrchimp/JakesMapbasicToolbars *
'****************************************************************

Include "mapbasic.def" ' Procedure declarations are in this file
Include "globals.def"

' Returns a boolean value - true if table is open
Function IsTableOpen(Byval TName as string) as logical              'Blockstart
  Dim TabCount, LoopCount as Integer

  TabCount = Numtables()
  IsTableOpen = False
  
  For LoopCount = 1 to TabCount
    If TName = TableInfo(LoopCount, TAB_INFO_NAME) then
      IsTableOpen = TRUE
      Exit function
    End If
  Next
End Function                                                        'Blockend

' Returns an array of open table names. Use like so:
' Dim TableArray(1) as String
' Call GetTableList(TableArray)
Sub GetTableList (TableList() as String)                            'Blockstart
  Dim i as integer
  Dim j as integer
  i = NumTables()
  ReDim TableList(i)
  For j = 1 to i
    TableList(j) = Tableinfo(j, TAB_INFO_NAME)
  Next
End Sub                                                             'Blockend
 
' Opens a dialog allowing user to choose an open table.
Function ChooseTable As String                                      'Blockstart
  Dim TableNum As Integer
  Dim TableArray(1) As String

  Call GetTableList(TableArray)

  Dialog
    Title "Choose table"
    Control PopupMenu
      Title From Variable TableArray
      Into TableNum
    Control OKButton
    Control Cancelbutton

  If CommandInfo(CMD_INFO_DLG_OK) Then
    ChooseTable = TableInfo(TableNum, TAB_INFO_NAME)
  Else
    ChooseTable = ""
  End If
End Function                                                        'Blockend

' Gets a window's ID from a dropdown list
Function ChooseWindowNum as String                                  'Blockstart
  OnError goto WinNumError
      
  Dim WindowNum      as Integer
  Dim WindowArray(1) as String

  Call GetWindowList(WindowArray)

  Dialog
    Title "Choose a window"
    Control PopupMenu
      Title From Variable WindowArray
      Into WindowNum
    Control OKButton
    Control Cancelbutton

  If CommandInfo(CMD_INFO_DLG_OK) Then
    ChooseWindowNum = WindowNum
  End If
      
  Exit Sub
	
WinNumError:
  Note "Error: " + Error$()
End Function                                                        'Blockend

' Gets a list of all open windows
Sub GetWindowList (WindowList() as String)                          'Blockstart
  Dim i as integer
  Dim j as integer
  i = NumWindows()
  ReDim WindowList(i)
  For j = 1 to i
    WindowList(j) = WindowInfo(j, WIN_INFO_NAME)
  Next
End Sub                                                             'Blockend

' Gets a list of all open windows
Sub GetWindowNumList (WindowList() as Integer)                          'Blockstart
  Dim i as integer
  Dim j as integer
  i = NumWindows()
  ReDim WindowList(i)
  For j = 1 to i
    WindowList(j) = j
  Next
End Sub                                                             'Blockend

' Opens a dialog for user to choose an existing directory
Function BrowseForFolder(hWndOwner As Integer, sPrompt As String) As String 'Blockstart
  Dim nNull As Integer
  Dim lpIDList As Integer
  Dim nResult As Integer
  Dim sPath As String
  Dim retval As Integer
  Dim bi As BrowseInfo
  bi.hWndOwner = hWndOwner
  retval = SHGetSpecialFolderLocation(0, CSIDL_DRIVES, bi.pidlRoot)
  bi.pszDisplayName = Space$(MAX_PATH)
  bi.lpszTitle = lstrcat(sPrompt, "")
  bi.ulFlags = 0 'BIF_RETURNONLYFSDIRS
   lpIDList = SHBrowseForFolder(bi)
  If lpIDList <> 0 Then
    sPath = Space$(260)
    nResult = SHGetPathFromIDList(lpIDList, sPath)
    If nResult <> 0 Then
    sPath = Rtrim$(sPath)
    End If
    Call CoTaskMemFree(lpIDList)
  End If
  BrowseForFolder = sPath
  Call CoTaskMemFree(bi.pIDLRoot)
End Function                                                        'Blockend

' Wraps BrowseForFolder in a sub...
Sub GetFolder                                                       'Blockstart
  ExportFolder = BrowseForFolder(hWndOwner, sPrompt)
End Sub                                                             'Blockend

' Returns true if an object is some kind of region: i.e. a shape with some
' form of circumference. i.e. a circle, square or polygon - not a line or point
Function IsObjectRegion(ByVal ObjAlias As Object) As Logical        'Blockstart
  Do Case ObjectInfo(ObjAlias, OBJ_INFO_TYPE)
    Case OBJ_TYPE_REGION, 
         OBJ_TYPE_RECT, 
         OBJ_TYPE_ROUNDRECT, 
         OBJ_TYPE_ELLIPSE
      IsObjectRegion = True
    Case Else
      IsObjectRegion = False
  End Case
End Function                                                        'Blockend

' Returns true if object is safe for convertion to DXF
Function IsObjectDXFSafe(ByVal ObjAlias As Object) As Logical       'Blockstart
  Do Case ObjectInfo(ObjAlias, OBJ_INFO_TYPE)
    Case OBJ_TYPE_MPOINT
      IsObjectDXFSafe = False
    Case Else
      IsObjectDXFSafe = True
  End Case
End Function                                                        'Blockend

' Returns true if object is safe for convertion to BNA
Function IsObjectBNASafe(ByVal ObjAlias As Object) As Logical       'Blockstart
  Do Case ObjectInfo(ObjAlias, OBJ_INFO_TYPE)
    Case OBJ_TYPE_MPOINT
    Case OBJ_TYPE_ARC
    Case OBJ_TYPE_PLINE
    Case OBJ_TYPE_FRAME
    Case OBJ_TYPE_TEXT
    Case OBJ_TYPE_COLLECTION
      IsObjectBNASafe = False
    Case Else
      IsObjectBNASafe = True
  End Case
End Function                                                        'Blockend

' Replaces slashes in a string with underscores
' Used by Site Plan Exporter for use in file names
Function SlashesToUnderscores(ByVal StrValue As String) As String   'Blockstart
  Dim Ptr as Integer
  Ptr = InStr(1, StrValue, "/")
  While (Ptr > 0)
    StrValue = ReplaceCharAtPosition(StrValue, Ptr, "_")
    Ptr = InStr(1, StrValue, "/")
  Wend
  SlashesToUnderscores = StrValue
End Function                                                        'Blockend

' Replace a certain character in a string.
' Part of SlashesToUnderscores
Function ReplaceCharAtPosition(ByVal StrValue As String, ByVal Position As Integer, ByVal ReplaceWith As String) As String 'blockstart
  Dim StrBegin As String
  Dim StrEnd As String
  StrBegin = Left$(StrValue, Position - 1)
  StrEnd = Right$(StrValue, Len(StrValue) - Position)
  ReplaceCharAtPosition = StrBegin & ReplaceWith & StrEnd
End Function                                                        'Blockend

Sub ColumnList(strTableName as string, strColumnList() as string)   'Blockstart
  OnError goto NoSelection

  Dim intCounter as integer

  redim strColumnList(numcols(strTableName))

  For intCounter = 1 to numCols(strTableName)
      strColumnList(intCounter) = ColumnInfo(strTableName,"col" & intCounter ,COL_INFO_NAME)
  Next

  Exit Sub

NoSelection:
  Print "There was an  error" & Error$()
End Sub                                                             'Blockend

Sub TableSelectHandler                                              'Blockstart
  Dim ColumnListVar(10) as String
  Dim strTable as string

  strTable = TableInfo(readcontrolvalue(51), TAB_INFO_NAME)

  Call ColumnList(strTable,ColumnListVar)

  Alter Control 52 Title from Variable ColumnListVar
End Sub                                                             'Blockend

Function WindowTypeNumToString (TypeNum as Integer) As String       'Blockstart
  Do Case TypeNum
    Case WIN_MAPPER
      WindowTypeNumToString = "WIN_MAPPER"
    Case WIN_BROWSER 
      WindowTypeNumToString = "WIN_BROWSER"
    Case WIN_LAYOUT
      WindowTypeNumToString = "WIN_LAYOUT"
    Case WIN_GRAPH
      WindowTypeNumToString = "WIN_GRAPH"
    Case WIN_BUTTONPAD
      WindowTypeNumToString = "WIN_BUTTONPAD"
    Case WIN_TOOLBAR
      WindowTypeNumToString = "WIN_TOOLBAR"
    Case WIN_CART_LEGEND
      WindowTypeNumToString = "WIN_CART_LEGEND"
    Case WIN_ADORNMENT
      WindowTypeNumToString = "WIN_ADORNMENT"
    Case WIN_3DMAP
      WindowTypeNumToString = "WIN_3DMAP"
    Case WIN_HELP
      WindowTypeNumToString = "WIN_HELP"
    Case WIN_MAPBASIC
      WindowTypeNumToString = "WIN_MAPBASIC"
    Case WIN_MESSAGE
      WindowTypeNumToString = "WIN_MESSAGE"
    Case WIN_RULER
      WindowTypeNumToString = "WIN_RULER"
    Case WIN_INFO
      WindowTypeNumToString = "WIN_INFO"
    Case WIN_LEGEND
      WindowTypeNumToString = "WIN_LEGEND"
    Case WIN_STATISTICS
      WindowTypeNumToString = "WIN_STATISTICS"
    Case WIN_MAPINFO
      WindowTypeNumToString = "WIN_MAPINFO"
  End Case
End Function                                                        'Blockend

Function GetEditableTable as String                                 'Blockstart
  Dim i, j, WinID as integer
  Dim TableList() as String
  i = NumTables()
  ReDim TableList(i)
  
  WinID = FrontWindow()
  For j = 1 to i
    Note LayerInfo(WinID, j, LAYER_INFO_EDITABLE)
    If LayerInfo(WinID, j, LAYER_INFO_EDITABLE) = TRUE Then
      GetEditableTable = TableInfo(j, TAB_INFO_NAME)
      'Exit Sub
    End If
  Next
End Function                                                        'Blockend

' Lets the user browse for a folder
'Declare function CreateDirectory32 lib "Kernel32.dll" alias "CreateDirectoryA"  ' Used by the MIF DXF SHP exporter
  '(byval sPath as string, tSecurity as SECURITY_ATTRIBUTES) as integer

' pauses execution for a given times  
'Declare Sub Sleep Lib "kernel32" Alias "Sleep" (ByVal dwMilliseconds As Integer)



' Note: pass in TargetFile rather than TargetDir 
' as some filetypes don't match extension
Sub ExportOGR(TblName as String, FileType as String, TargetFile as String) 'Blockstart
  OnError Goto OGRError

  Dim TableFileName, RunStr, MakerBAT, ExportPath, TempTabURI As String
  Dim StartTime, EndTime as Integer
  Dim ErrorLog as String
  
  ExportPath = PathToDirectory$(TargetFile)
  TempTabURI = PathToDirectory$(TempFileName$("")) & "tmptab.tab"
  ErrorLog = ExportPath & "ErrorLog.txt"  
  
  If FileType = "DXF" Then
    SELECT * FROM TblName WHERE Obj INTO tmptab
    SELECT Obj FROM tmptab WHERE IsObjectDXFSafe(Obj) INTO ExportTab
  Else
    SELECT * FROM TblName WHERE Obj INTO ExportTab
  End If
  
  Browse * From ExportTab
  
  Print "TempTabURI: " & TempTabURI
  
  Commit Table ExportTab As TempTabURI
 
  Print "Log File: " & ErrorLog
 
  RunStr   = "echo ""Exporting table " & TblName & "..."" && echo >> " & ErrorLog 
           & "OGR2OGR -f """ & FileType & """ """ & TargetFile & """ """ & TempTabURI & """ -overwrite -skipfailures >> """ & ErrorLog & """" & Chr$(10) 
           & "PAUSE" & Chr$(10) 
           & "DEL ""%~f0"""
  MakerBAT = GetFolderPath$(FOLDER_MI_APPDATA) & "DELETEME.bat"
  
  Print "ExportPath: " & ExportPath
  'Print "TableFileName: " & TableFileName
  Print "RunStr: " & RunStr
  Print "MakerBAT: " & MakerBAT
  Print "TblName: " & TblName
  Print "FileType: " & FileType
  Print "TargetFile: " & TargetFile
  
  Open File MakerBAT
    For Output
    Access Write
    As #1
  Print #1, RunStr
  Close File #1
  
  Run Program MakerBAT
  
  Print "Waiting for export to finish..."
  StartTime = GetTickCount()
  Do While FileExists(MakerBAT)
    If (EndTime - StartTime) > 20000 Then
      Print "Hmmm that's taking quite a long time. If you don't think it should be taking this long please delete the following file to force MapInfo out of its infinite loop: " & MakerBAT
    End If
    
    EndTime = GetTickCount()
    Print "Still waiting..."
    Call Sleep(2000)
  Loop
  
  Print "File exported successfully!"
  
  Drop Table ExportTab
  
  If IsTableOpen(tmptab) Then
    Drop Table tmptab
  End If
  
  Exit Sub
  
OGRError:
  Print "OGR Error. Attempting to continue... [" & Error$() & "]"
End Sub                                                             'Blockend

Sub ExportIMUT                                                      'Blockstart
  Note "This doesn't work yet."
End Sub                                                             'Blockend


' Convert Integer to Hexadecimal string
' By Anssi Joutsiniemi - http://www.mail-archive.com/mapinfo-l@csn.net/msg09709.html
Function Hex(ByVal iInput As Integer, ByVal iFormat As Integer) As String 'Blockstart
  Dim x As Integer
  Dim i, iDummy As SmallInt
  Dim sGlyph, sOut As String

  x = iInput
  Do While 1
    i = i + 1
    iDummy = (x / 16^(i - 1)) Mod 16
    Do Case iDummy
      Case 10
        sGlyph = "A"
      Case 11
        sGlyph = "B"
      Case 12
        sGlyph = "C"
      Case 13
        sGlyph = "D"
      Case 14
        sGlyph = "E"
      Case 15
        sGlyph = "F"
      Case Else
        sGlyph = Str$(iDummy)

    End Case

    sOut = sGlyph + sOut
    If x < 16^i Then
      Exit Do
    End If
  Loop

  If iFormat Then
    iDummy = iFormat - Len(sOut)
    If iDummy > 0 Then
      sOut = String$(iDummy,"0") & sOut
    Else
      sOut = Right$(sOut,iFormat)
    End If
  End If

  Hex = sOut
End Function                                                              'Blockend

' get name of currently editable layer
' By Peter Horsboll Moller - gis.stackexchange.com/questions/22931
Function GetEditLayerName(ByVal nMID As Integer) As String             'Blockstart
  Dim nEditLayerID As Integer

  GetEditLayerName = ""
  nEditLayerID    = MapperInfo(nMID, MAPPER_INFO_EDIT_LAYER)
  Do Case nEditLayerID
    Case -1 '**No editable layer currently
        
    Case 0 '**The cosmetic layer is currently editable
      GetEditLayerName = LayerInfo(nMID, nEditLayerID, LAYER_INFO_NAME)
    Case Else
      GetEditLayerName = LayerInfo(nMID, nEditLayerID, LAYER_INFO_NAME)
  End Case
End Function                                                              'Blockend

