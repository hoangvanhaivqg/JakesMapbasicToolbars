'****************************************************************
'* Jake's Amazing Toolbar - Helper Functions                    *
'* 2009-2011 All Rights Reserved                                *
'* Source available at github.com/mrchimp/JakesMapbasicToolbars *
'****************************************************************

Include "mapbasic.def" ' Procedure declarations are in this file
Include "globals.def"

' Returns a boolean value - true if table is open
Function IsTableOpen(Byval TName as string) as logical              'Blockstart
  Dim l as Logical
  Dim TabCount, LoopCount as Integer

  TabCount = Numtables()
  IsTableOpen = False
  
  For LoopCount = 1 to TabCount
    If TName = TableInfo(LoopCount, TAB_INFO_NAME) then
      IsTableOpen = TRUE
      Exit function
    End If
  Next
End Function                                                        'Blockend

' Returns an array of open table names. Use like so:
' Dim TableArray(1) as String
' Call GetTableList(TableArray)
Sub GetTableList (TableList() as String)                            'Blockstart
  Dim i as integer
  Dim j as integer
  i = NumTables()
  ReDim TableList(i)
  For j = 1 to i
    TableList(j) = Tableinfo(j, TAB_INFO_NAME)
  Next
End Sub                                                             'Blockend
 
' Opens a dialog allowing use to choose an open table.
Function ChooseTable As String                                      'Blockstart
  Dim TableNum As Integer
  Dim TableArray(1) As String

  Call GetTableList(TableArray)

  Dialog
    Title "Choose table"
    Control PopupMenu
      Title From Variable TableArray
      Into TableNum
    Control OKButton
    Control Cancelbutton

  If CommandInfo(CMD_INFO_DLG_OK) Then
    ChooseTable = TableInfo(TableNum, TAB_INFO_NAME)
  Else
    ChooseTable = ""
  End If
End Function                                                        'Blockend

' Gets a window's ID from a dropdown list
Function ChooseWindowNum as String                                  'Blockstart
  OnError goto WinNumError
      
  Dim WindowNum      as Integer
  Dim WindowArray(1) as String

  Call GetWindowList(WindowArray)

  Dialog
    Title "Choose a window"
    Control PopupMenu
      Title From Variable WindowArray
      Into WindowNum
    Control OKButton
    Control Cancelbutton

  If CommandInfo(CMD_INFO_DLG_OK) Then
    ChooseWindowNum = WindowNum
  End If
      
  Exit Sub
	
WinNumError:
  Note "Error: " + Error$()
End Function                                                        'Blockend

' Gets a list of all open windows
Sub GetWindowList (WindowList() as String)                          'Blockstart
  Dim i as integer
  Dim j as integer
  i = NumWindows()
  ReDim WindowList(i)
  For j = 1 to i
    WindowList(j) = WindowInfo(j, WIN_INFO_NAME)
  Next
End Sub                                                             'Blockend

' Gets a list of all open windows
Sub GetWindowNumList (WindowList() as Integer)                          'Blockstart
  Dim i as integer
  Dim j as integer
  i = NumWindows()
  ReDim WindowList(i)
  For j = 1 to i
    WindowList(j) = j
  Next
End Sub                                                             'Blockend

'Blockstart ' BrowseForFolder Stuff --------------------------------------------
' THE FOLLOWING ARE ALL NEEDED FOR THE BrowseForFolder FUNCTION TO WORK
Define BIF_RETURNONLYFSDIRS &H1
Define MAX_PATH 260
Define CSIDL_DRIVES &H11
Type BrowseInfo
  hWndOwner      As Integer
  pIDLRoot       As Integer
  pszDisplayName As String
  lpszTitle      As String
  ulFlags        As Integer
  lpfnCallback   As Integer
  lParam         As Integer
  iImage         As Integer
End Type
Dim hWndOwner As Integer
Dim sPrompt As String
Declare Sub CoTaskMemFree Lib "ole32.dll" (ByVal hMem As Integer)
Declare Function lstrcat Lib "kernel32" Alias "lstrcatA" (ByVal lpString1 As String, ByVal lpString2 As String) As Integer
Declare Function SHBrowseForFolder Lib "shell32" Alias "SHBrowseForFolderA"(lpbi As BrowseInfo) As Integer
Declare Function SHGetPathFromIDList Lib "shell32" Alias "SHGetPathFromIDListA" (ByVal pidList As Integer, lpBuffer As String) As Integer
Declare Function SHGetSpecialFolderLocation Lib "shell32.dll" (ByVal hwndOwner As Integer, ByVal nFolder As Integer, ppidl As Integer) As Integer
Declare Function BrowseForFolder(hWndOwner As Integer, sPrompt As String) As String
'Blockend ' End BrowseForFolder Stuff ==========================================

' Opens a dialog for user to choose an existing directory
Function BrowseForFolder(hWndOwner As Integer, sPrompt As String) As String 'Blockstart
  Dim nNull As Integer
  Dim lpIDList As Integer
  Dim nResult As Integer
  Dim sPath As String
  Dim retval As Integer
  Dim bi As BrowseInfo
  bi.hWndOwner = hWndOwner
  retval = SHGetSpecialFolderLocation(0, CSIDL_DRIVES, bi.pidlRoot)
  bi.pszDisplayName = Space$(MAX_PATH)
  bi.lpszTitle = lstrcat(sPrompt, "")
  bi.ulFlags = 0 'BIF_RETURNONLYFSDIRS
   lpIDList = SHBrowseForFolder(bi)
  If lpIDList <> 0 Then
    sPath = Space$(260)
    nResult = SHGetPathFromIDList(lpIDList, sPath)
    If nResult <> 0 Then
    sPath = Rtrim$(sPath)
    End If
    Call CoTaskMemFree(lpIDList)
  End If
  BrowseForFolder = sPath
  Call CoTaskMemFree(bi.pIDLRoot)
End Function                                                        'Blockend

' Wraps BrowseForFolder in a sub...
Sub GetFolder                                                       'Blockstart
  SitePlanExportFolder = BrowseForFolder(hWndOwner, sPrompt)
End Sub                                                             'Blockend

' Returns true if an object is some kind of region: i.e. a shape with some
' form of circumference. i.e. a circle, square or polygon - not a line or point
Function IsObjectRegion(ObjAlias As Object) As Logical              'Blockstart
  Dim ObjectType As SmallInt
  ObjectType = ObjectInfo(ObjAlias, OBJ_INFO_TYPE)
  Do Case ObjectType
    Case OBJ_TYPE_REGION
      IsObjectRegion = True
    Case OBJ_TYPE_RECT
      IsObjectRegion = True
    Case OBJ_TYPE_ROUNDRECT
      IsObjectRegion = True
    Case OBJ_TYPE_ELLIPSE
      IsObjectRegion = True
    Case Else
      IsObjectRegion = False
  End Case
End Function                                                        'Blockend

' Replaces slashes in a string with underscores
' Used by Site Plan Exporter for use in file names
Function SlashesToUnderscores(ByVal StrValue As String) As String   'Blockstart
  Dim Ptr as Integer
  Ptr = InStr(1, StrValue, "/")
  While (Ptr > 0)
    StrValue = ReplaceCharAtPosition(StrValue, Ptr, "_")
    Ptr = InStr(1, StrValue, "/")
  Wend
  SlashesToUnderscores = StrValue
End Function                                                        'Blockend

' Replace a certain character in a string.
' Part of SlashesToUnderscores
Function ReplaceCharAtPosition(ByVal StrValue As String, ByVal Position As Integer, ByVal ReplaceWith As String) As String 'blockstart
  Dim StrBegin As String
  Dim StrEnd As String
  StrBegin = Left$(StrValue, Position - 1)
  StrEnd = Right$(StrValue, Len(StrValue) - Position)
  ReplaceCharAtPosition = StrBegin & ReplaceWith & StrEnd
End Function                                                        'Blockend

Sub ColumnList(strTableName as string, strColumnList() as string)   'Blockstart
  OnError goto NoSelection

  Dim intCounter as integer

  redim strColumnList(numcols(strTableName))

  For intCounter = 1 to numCols(strTableName)
      strColumnList(intCounter) = ColumnInfo(strTableName,"col" & intCounter ,COL_INFO_NAME)
  Next

  Exit Sub

NoSelection:
  Print "There was an  error" & Error$()
End Sub                                                             'Blockend

Sub TableSelectHandler                                              'Blockstart
  Dim ColumnListVar(10) as String
  Dim strTable as string

  strTable = TableInfo(readcontrolvalue(51), TAB_INFO_NAME)

  Call ColumnList(strTable,ColumnListVar)

  Alter Control 52 Title from Variable ColumnListVar
End Sub                                                             'Blockend

Function WindowTypeNumToString (TypeNum as Integer) As String       'Blockstart
  Do Case TypeNum
    Case WIN_MAPPER
      WindowTypeNumToString = "WIN_MAPPER"
    Case WIN_BROWSER 
      WindowTypeNumToString = "WIN_BROWSER"
    Case WIN_LAYOUT
      WindowTypeNumToString = "WIN_LAYOUT"
    Case WIN_GRAPH
      WindowTypeNumToString = "WIN_GRAPH"
    Case WIN_BUTTONPAD
      WindowTypeNumToString = "WIN_BUTTONPAD"
    Case WIN_TOOLBAR
      WindowTypeNumToString = "WIN_TOOLBAR"
    Case WIN_CART_LEGEND
      WindowTypeNumToString = "WIN_CART_LEGEND"
    Case WIN_ADORNMENT
      WindowTypeNumToString = "WIN_ADORNMENT"
    Case WIN_3DMAP
      WindowTypeNumToString = "WIN_3DMAP"
    Case WIN_HELP
      WindowTypeNumToString = "WIN_HELP"
    Case WIN_MAPBASIC
      WindowTypeNumToString = "WIN_MAPBASIC"
    Case WIN_MESSAGE
      WindowTypeNumToString = "WIN_MESSAGE"
    Case WIN_RULER
      WindowTypeNumToString = "WIN_RULER"
    Case WIN_INFO
      WindowTypeNumToString = "WIN_INFO"
    Case WIN_LEGEND
      WindowTypeNumToString = "WIN_LEGEND"
    Case WIN_STATISTICS
      WindowTypeNumToString = "WIN_STATISTICS"
    Case WIN_MAPINFO
      WindowTypeNumToString = "WIN_MAPINFO"
  End Case
End Function                                                        'Blockend


Sub GetEditableTable(TableName as String)                           'Blockstart
  Dim i as integer
  Dim j as integer
  Dim TableList(1) as String
  i = NumTables()
  ReDim TableList(i)
  For j = 1 to i
    If TableInfo(j, LAYER_INFO_EDITABLE) Then
      TableName = TableInfo(j, TAB_INFO_NAME)
      Exit Sub
    End If
  Next
End Sub                                                             'Blockend

